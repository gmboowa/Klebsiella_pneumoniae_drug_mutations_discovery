#!/usr/bin/env bash
# ==============================================================================
# KpSNP: Klebsiella pneumoniae Genomic Surveillance Pipeline
#
# Enhanced Features:
# 1. Input validation & dynamic resource allocation
# 2. Structured output organization
# 3. Comprehensive error handling
# 4. Antibiotic resistance reporting with AMR categories
# 5. Runtime performance tracking
# ==============================================================================

set -euo pipefail  # Strict error handling

# Configuration
start_time=$(date +%s)
VERSION="2.1.0"
REF_GENOME="/path/to/Klebsiella_pneumoniae_reference.gbk"
AMR_GENES=("aacA4" "rmtC" "bla" "ramR" "oqxA" "oqxB" "gyrA" "parC" "fosA" "mgrB" "sul1" "tet" "mph")
THREADS=$(nproc)  # Automatically detect available cores

# Functions
show_header() {
    echo -e "\n\033[1;36mKpSNP v${VERSION}\033[0m"
    echo -e "Started: $(date)"
    echo -e "System: ${HOSTNAME}"
    echo -e "CPU Threads: ${THREADS}"
}

validate_inputs() {
    [[ -f "sample_list.txt" ]] || { echo "ERROR: Missing sample_list.txt"; exit 1; }
    [[ -f "${REF_GENOME}" ]] || { echo "ERROR: Reference genome missing"; exit 1; }
    command -v fastqc >/dev/null 2>&1 || { echo "ERROR: FastQC not installed"; exit 1; }
}

run_qc() {
    local sample=$1
    echo -e "\n\033[1;34m[QC] Processing ${sample}\033[0m"
    fastqc -t ${THREADS} "${sample}_1.fastq.gz" "${sample}_2.fastq.gz"
}

call_variants() {
    local sample=$1
    echo -e "\n\033[1;32m[Variant Calling] ${sample}\033[0m"
    snippy --cpus ${THREADS} \
           --outdir "results/${sample}_snps" \
           --ref ${REF_GENOME} \
           --R1 "${sample}_1.fastq.gz" \
           --R2 "${sample}_2.fastq.gz"
}

generate_amr_report() {
    local sample=$1
    local snp_file="results/${sample}_snps/snps.tab"
    local report_dir="results/${sample}_amr"
    
    mkdir -p "${report_dir}"
    
    echo -e "\n\033[1;35m[AMR Analysis] ${sample}\033[0m"
    awk -v genes="${AMR_GENES[*]}" '
    BEGIN { split(genes, arr, " ") }
    $0 ~ "missense_variant" {
        for (gene in arr) {
            if ($0 ~ arr[gene]) {
                print $0 > "'"${report_dir}/detailed_amr.txt"'"
            }
        }
    }' "${snp_file}"

    # Generate summary report
    declare -A resistance_categories=(
        ["Aminoglycoside"]="aacA4|rmtC"
        ["Beta-Lactam"]="bla"
        ["Fluoroquinolone"]="ramR|oqxA|oqxB|gyrA|parC"
        ["Fosfomycin"]="fosA"
        ["Polymyxin"]="mgrB"
        ["Sulfonamide"]="sul1"
        ["Tetracycline"]="tet"
        ["Macrolide"]="mph"
    )

    for category in "${!resistance_categories[@]}"; do
        if grep -qE "${resistance_categories[$category]}" "${report_dir}/detailed_amr.txt"; then
            echo "${category} Resistance Detected" >> "${report_dir}/amr_summary.txt"
        fi
    done
}

main() {
    show_header
    validate_inputs
    mkdir -p results/qc_reports
    
    # Process samples
    while read sample; do
        run_qc "${sample}"
        call_variants "${sample}"
        generate_amr_report "${sample}"
    done < sample_list.txt

    # Generate final reports
    echo -e "\n\033[1;33m[Finalizing Reports]\033[0m"
    multiqc results/qc_reports -o results/multiqc_report
    find results -empty -delete
    
    # Runtime calculation
    end_time=$(date +%s)
    echo -e "\n\033[1;32mPipeline completed in $((end_time - start_time)) seconds\033[0m"
}

# Execute main workflow
main "$@"
